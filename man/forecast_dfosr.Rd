% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_functions.R
\name{forecast_dfosr}
\alias{forecast_dfosr}
\title{forecast_dfosr}
\usage{
forecast_dfosr(X_Tp1 = NULL, post_sims, factor_model = "AR")
}
\arguments{
\item{X_Tp1}{the \code{p x 1} matrix of predictors at the forecasting time point \code{T + 1};
if \code{NULL}, set to an intercept}

\item{post_sims}{a named list of posterior draws for the following parameters:
\itemize{
\item \code{alpha} (regression coefficients)
\item \code{fk} (loading curves)
\item \code{mu_k} (intercept term for factor k)
\item \code{ar_phi} (OPTIONAL; AR coefficients for each k under AR(1) model)
}}

\item{factor_model}{model for the (dynamic) factors;
must be one of
\itemize{
\item "IND" (independent errors)
\item "AR" (stationary autoregression of order 1)
\item "RW" (random walk model)
}}
}
\value{
\code{Yfore}, the \code{m x 1} curve forecasting estimate
}
\description{
Forecast with a dynamic function-on-scalars regression model
Compute the one-step forecasting estimate
under a dynamic function-on-scalars regression model.
}
\examples{
\dontrun{
# Simulate some data:
sim_data = simulate_dfosr(T = 200, m = 50, p_0 = 2, p_1 = 2)
Y = sim_data$Y; X = sim_data$X; tau = sim_data$tau
T = nrow(Y); m = ncol(Y); p = ncol(X) # Dimensions

# Delete and store the last time point (for forecasting):
Y_Tp1 = Y[T,]; X_Tp1 = X[T,]
Y = Y[-T,]; X = X[-T,]; T = nrow(Y);

# Run the MCMC w/ K = 6:
out = dfosr(Y = Y, tau = tau, X = X, K = 6,
           factor_model = 'AR',
           use_dynamic_reg = TRUE,
           mcmc_params = list("beta", "fk", "alpha", "mu_k", "ar_phi"))

# Compute one-step forecasts:
Yfore = forecast_dfosr(X_Tp1 = X_Tp1,
                       post_sims = out,
                       factor_model = "AR")
# Plot the results:
plot(tau, Yfore, ylim = range(Yfore, Y_Tp1, Y[T,], na.rm=TRUE),
     main = 'One-Step Forecast',
     lwd = 8, col = "cyan", type = 'l')
# Add the most recent observed curve:
lines(tau, Y[T,], type='p', pch = 2)
# Add the realized curve:
lines(tau, Y_Tp1, type='p')
# And the true curve:
lines(tau, sim_data$Y_true[T+1,], lwd=8, col='black', lty=6)
}
}
